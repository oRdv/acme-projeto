/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SqlManagementClient } from "@azure/arm-sql";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Updates an existing database.
 *
 * @summary Updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/PatchVCoreDatabaseAssignMaintenanceConfiguration.json
 */
function assignsMaintenanceWindowToADatabase() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            maintenanceConfigurationId: "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1",
            sku: { name: "BC_Gen5_4" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing database.
 *
 * @summary Updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/PatchDatabaseVBSEnclave.json
 */
function createsADatabaseWithVbsEnclaveType() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = { preferredEnclaveType: "VBS" };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing database.
 *
 * @summary Updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/PatchVCoreDatabaseWithKeysAndEncryptionProtector.json
 */
function patchADatabaseWithDatabaseLevelCustomerManagedKeys() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            encryptionProtector: "https://your-key-vault-name.vault.azure.net/yourKey/yourKeyVersion",
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/00000000111122223333444444444444/resourcegroups/DefaultSqlSouthEastAsia/providers/MicrosoftManagedIdentity/userAssignedIdentities/umi": {},
                    "/subscriptions/00000000111122223333444444444444/resourcegroups/DefaultSqlSouthEastAsia/providers/MicrosoftManagedIdentity/userAssignedIdentities/umiToDelete": {}
                }
            },
            keys: {
                "https://yourKeyVaultNameVaultAzureNet/yourKey/yourKeyVersion": {},
                "https://yourKeyVaultNameVaultAzureNet/yourKey2/yourKey2VersionToDelete": {}
            },
            sku: { name: "S0", tier: "Standard" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing database.
 *
 * @summary Updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/PatchVCoreDatabaseResetMaintenanceConfiguration.json
 */
function resetsMaintenanceWindowOfADatabaseToDefault() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            maintenanceConfigurationId: "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_Default",
            sku: { name: "BC_Gen5_4" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing database.
 *
 * @summary Updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/PatchDatabaseDefaultEnclave.json
 */
function updatesADatabaseWithDefaultEnclaveType() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = { preferredEnclaveType: "Default" };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates an existing database.
 *
 * @summary Updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/PatchVCoreDatabase.json
 */
function updatesADatabase() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            licenseType: "LicenseIncluded",
            maxSizeBytes: 1073741824,
            sku: { name: "BC_Gen4_4" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        assignsMaintenanceWindowToADatabase();
        createsADatabaseWithVbsEnclaveType();
        patchADatabaseWithDatabaseLevelCustomerManagedKeys();
        resetsMaintenanceWindowOfADatabaseToDefault();
        updatesADatabaseWithDefaultEnclaveType();
        updatesADatabase();
    });
}
main().catch(console.error);
//# sourceMappingURL=databasesUpdateSample.js.map