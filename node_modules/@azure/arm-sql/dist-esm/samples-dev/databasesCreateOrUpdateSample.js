/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SqlManagementClient } from "@azure/arm-sql";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateVCoreDatabaseByServiceObjective.json
 */
function createsAVCoreDatabaseBySpecifyingServiceObjectiveName() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            location: "southeastasia",
            sku: { name: "BC", capacity: 2, family: "Gen4" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateVCoreDatabaseBySkuNameCapacity.json
 */
function createsAVCoreDatabaseBySpecifyingSkuNameAndCapacity() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            location: "southeastasia",
            sku: { name: "BC_Gen4", capacity: 2 }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDwDatabaseCrossSubscriptionRestore.json
 */
function createsADataWarehouseDatabaseAsACrossSubscriptionRestoreFromABackupOfADroppedDatabase() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdw";
        const parameters = {
            createMode: "Restore",
            location: "southeastasia",
            sourceResourceId: "/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/srcsvr/restorableDroppedDatabases/srcdw,131403269876900000"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDwDatabaseCrossSubscriptionRecovery.json
 */
function createsADataWarehouseDatabaseAsACrossSubscriptionRestoreFromAGeoBackup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-WestUS";
        const serverName = "testsvr";
        const databaseName = "testdw";
        const parameters = {
            createMode: "Recovery",
            location: "westus",
            sourceResourceId: "/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-SQL-EastUS/providers/Microsoft.Sql/servers/srcsvr/recoverabledatabases/srcdw"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDwDatabaseCrossSubscriptionPITR.json
 */
function createsADataWarehouseDatabaseAsACrossSubscriptionRestoreFromARestorePointOfAnExistingDatabase() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdw";
        const parameters = {
            createMode: "PointInTimeRestore",
            location: "southeastasia",
            restorePointInTime: new Date("2022-01-22T05:35:31.503Z"),
            sourceResourceId: "/subscriptions/55555555-6666-7777-8888-999999999999/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/srcsvr/databases/srcdw"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseCopyMode.json
 */
function createsADatabaseAsACopy() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "dbcopy";
        const parameters = {
            createMode: "Copy",
            location: "southeastasia",
            sku: { name: "S0", tier: "Standard" },
            sourceDatabaseId: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SouthEastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseStandbyMode.json
 */
function createsADatabaseAsAStandbySecondary() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            createMode: "Secondary",
            location: "southeastasia",
            secondaryType: "Standby",
            sku: { name: "S0", tier: "Standard" },
            sourceDatabaseId: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/testdb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseSecondaryMode.json
 */
function createsADatabaseAsAnOnLineSecondary() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            createMode: "Secondary",
            location: "southeastasia",
            secondaryType: "Geo",
            sku: { name: "S0", tier: "Standard" },
            sourceDatabaseId: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/testdb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseNamedReplica.json
 */
function createsADatabaseAsNamedReplicaSecondary() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            createMode: "Secondary",
            location: "southeastasia",
            secondaryType: "Named",
            sku: { name: "HS_Gen4", capacity: 2, tier: "Hyperscale" },
            sourceDatabaseId: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-NorthEurope/providers/Microsoft.Sql/servers/testsvr1/databases/primarydb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabasePITRMode.json
 */
function createsADatabaseFromPointInTimeRestore() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "dbpitr";
        const parameters = {
            createMode: "PointInTimeRestore",
            location: "southeastasia",
            restorePointInTime: new Date("2020-10-22T05:35:31.503Z"),
            sourceDatabaseId: "/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default-SQL-SoutheastAsia/providers/Microsoft.Sql/servers/testsvr/databases/testdb"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseDefaultEnclave.json
 */
function createsADatabaseWithDefaultEnclaveType() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            location: "southeastasia",
            preferredEnclaveType: "Default"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseVBSEnclave.json
 */
function createsADatabaseWithVbsEnclaveType() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            location: "southeastasia",
            preferredEnclaveType: "VBS"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseWithAvailabilityZone.json
 */
function createsADatabaseWithAvailabilityZoneSpecified() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            availabilityZone: "1",
            collation: "SQL_Latin1_General_CP1_CI_AS",
            createMode: "Default",
            location: "southeastasia",
            maxSizeBytes: 1073741824,
            sku: { name: "S0", tier: "Standard" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseDefaultModeWithKeysAndEncryptionProtector.json
 */
function createsADatabaseWithDatabaseLevelCustomerManagedKeys() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            collation: "SQL_Latin1_General_CP1_CI_AS",
            createMode: "Default",
            encryptionProtector: "https://your-key-vault-name.vault.azure.net/yourKey/yourKeyVersion",
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/00000000111122223333444444444444/resourcegroups/DefaultSqlSouthEastAsia/providers/MicrosoftManagedIdentity/userAssignedIdentities/umi": {}
                }
            },
            keys: {
                "https://yourKeyVaultNameVaultAzureNet/yourKey/yourKeyVersion": {},
                "https://yourKeyVaultNameVaultAzureNet/yourKey2/yourKey2Version": {}
            },
            location: "southeastasia",
            maxSizeBytes: 1073741824,
            sku: { name: "S0", tier: "Standard" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseDefaultMode.json
 */
function createsADatabaseWithDefaultMode() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            collation: "SQL_Latin1_General_CP1_CI_AS",
            createMode: "Default",
            location: "southeastasia",
            maxSizeBytes: 1073741824,
            sku: { name: "S0", tier: "Standard" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseLedger.json
 */
function createsADatabaseWithLedgerOn() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = { isLedgerOn: true, location: "southeastasia" };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseMin.json
 */
function createsADatabaseWithMinimumNumberOfParameters() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = { location: "southeastasia" };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseMaintenanceConfiguration.json
 */
function createsADatabaseWithPreferredMaintenanceWindow() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            collation: "SQL_Latin1_General_CP1_CI_AS",
            createMode: "Default",
            location: "southeastasia",
            maintenanceConfigurationId: "/subscriptions/00000000-1111-2222-3333-444444444444/providers/Microsoft.Maintenance/publicMaintenanceConfigurations/SQL_SouthEastAsia_1",
            maxSizeBytes: 1073741824,
            sku: { name: "S2", tier: "Standard" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/CreateDatabaseConfiguredBackupStorageRedundancy.json
 */
function createsADatabaseWithSpecifiedBackupStorageRedundancy() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            location: "southeastasia",
            requestedBackupStorageRedundancy: "Zone"
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/UpdateDatabaseHyperscaleMigrationWithManualCutover.json
 */
function updatesADatabaseToHyperscaleSloWithManualCutover() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/00000000111122223333444444444444/resourcegroups/DefaultSqlSouthEastAsia/providers/MicrosoftSql/userAssignedIdentities/umi": {},
                    "/subscriptions/00000000111122223333444444444444/resourcegroups/DefaultSqlSouthEastAsia/providers/MicrosoftSql/userAssignedIdentities/umiToDelete": {}
                }
            },
            location: "southeastasia",
            manualCutover: true,
            sku: { name: "HS_Gen5_2", tier: "Hyperscale" }
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a new database or updates an existing database.
 *
 * @summary Creates a new database or updates an existing database.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2022-08-01-preview/examples/UpdateDatabaseHyperscaleMigrationPerformCutover.json
 */
function updatesADatabaseToHyperscaleTierByTriggeringManualCutoverDuringMigrationWorkflow() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["SQL_SUBSCRIPTION_ID"] ||
            "00000000-1111-2222-3333-444444444444";
        const resourceGroupName = process.env["SQL_RESOURCE_GROUP"] || "Default-SQL-SouthEastAsia";
        const serverName = "testsvr";
        const databaseName = "testdb";
        const parameters = {
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/00000000111122223333444444444444/resourcegroups/DefaultSqlSouthEastAsia/providers/MicrosoftSql/userAssignedIdentities/umi": {},
                    "/subscriptions/00000000111122223333444444444444/resourcegroups/DefaultSqlSouthEastAsia/providers/MicrosoftSql/userAssignedIdentities/umiToDelete": {}
                }
            },
            location: "southeastasia",
            performCutover: true
        };
        const credential = new DefaultAzureCredential();
        const client = new SqlManagementClient(credential, subscriptionId);
        const result = yield client.databases.beginCreateOrUpdateAndWait(resourceGroupName, serverName, databaseName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createsAVCoreDatabaseBySpecifyingServiceObjectiveName();
        createsAVCoreDatabaseBySpecifyingSkuNameAndCapacity();
        createsADataWarehouseDatabaseAsACrossSubscriptionRestoreFromABackupOfADroppedDatabase();
        createsADataWarehouseDatabaseAsACrossSubscriptionRestoreFromAGeoBackup();
        createsADataWarehouseDatabaseAsACrossSubscriptionRestoreFromARestorePointOfAnExistingDatabase();
        createsADatabaseAsACopy();
        createsADatabaseAsAStandbySecondary();
        createsADatabaseAsAnOnLineSecondary();
        createsADatabaseAsNamedReplicaSecondary();
        createsADatabaseFromPointInTimeRestore();
        createsADatabaseWithDefaultEnclaveType();
        createsADatabaseWithVbsEnclaveType();
        createsADatabaseWithAvailabilityZoneSpecified();
        createsADatabaseWithDatabaseLevelCustomerManagedKeys();
        createsADatabaseWithDefaultMode();
        createsADatabaseWithLedgerOn();
        createsADatabaseWithMinimumNumberOfParameters();
        createsADatabaseWithPreferredMaintenanceWindow();
        createsADatabaseWithSpecifiedBackupStorageRedundancy();
        updatesADatabaseToHyperscaleSloWithManualCutover();
        updatesADatabaseToHyperscaleTierByTriggeringManualCutoverDuringMigrationWorkflow();
    });
}
main().catch(console.error);
//# sourceMappingURL=databasesCreateOrUpdateSample.js.map