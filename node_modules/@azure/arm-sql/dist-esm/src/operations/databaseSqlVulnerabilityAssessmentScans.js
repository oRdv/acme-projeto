/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing DatabaseSqlVulnerabilityAssessmentScans operations. */
export class DatabaseSqlVulnerabilityAssessmentScansImpl {
    /**
     * Initialize a new instance of the class DatabaseSqlVulnerabilityAssessmentScans class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the vulnerability assessment scans of a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param options The options parameters.
     */
    listBySqlVulnerabilityAssessments(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, options) {
        const iter = this.listBySqlVulnerabilityAssessmentsPagingAll(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySqlVulnerabilityAssessmentsPagingPage(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, options, settings);
            }
        };
    }
    listBySqlVulnerabilityAssessmentsPagingPage(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, options, settings) {
        return __asyncGenerator(this, arguments, function* listBySqlVulnerabilityAssessmentsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listBySqlVulnerabilityAssessments(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listBySqlVulnerabilityAssessmentsNext(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listBySqlVulnerabilityAssessmentsPagingAll(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, options) {
        return __asyncGenerator(this, arguments, function* listBySqlVulnerabilityAssessmentsPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listBySqlVulnerabilityAssessmentsPagingPage(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the vulnerability assessment scans of a database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param options The options parameters.
     */
    _listBySqlVulnerabilityAssessments(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            options
        }, listBySqlVulnerabilityAssessmentsOperationSpec);
    }
    /**
     * Get a database vulnerability assessment scan result.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
     * @param options The options parameters.
     */
    get(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, scanId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            scanId,
            options
        }, getOperationSpec);
    }
    /**
     * ListBySqlVulnerabilityAssessmentsNext
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListBySqlVulnerabilityAssessments method.
     * @param options The options parameters.
     */
    _listBySqlVulnerabilityAssessmentsNext(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            serverName,
            databaseName,
            vulnerabilityAssessmentName,
            nextLink,
            options
        }, listBySqlVulnerabilityAssessmentsNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listBySqlVulnerabilityAssessmentsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SqlVulnerabilityAssessmentScanRecordListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.vulnerabilityAssessmentName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SqlVulnerabilityAssessmentScanRecord
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion4],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.vulnerabilityAssessmentName,
        Parameters.scanId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySqlVulnerabilityAssessmentsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SqlVulnerabilityAssessmentScanRecordListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serverName,
        Parameters.databaseName,
        Parameters.nextLink,
        Parameters.vulnerabilityAssessmentName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=databaseSqlVulnerabilityAssessmentScans.js.map