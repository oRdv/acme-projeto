import { DatabaseEncryptionProtectors } from "../operationsInterfaces";
import { SqlManagementClient } from "../sqlManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { EncryptionProtectorName, DatabaseEncryptionProtectorsRevalidateOptionalParams, DatabaseEncryptionProtectorsRevertOptionalParams } from "../models";
/** Class containing DatabaseEncryptionProtectors operations. */
export declare class DatabaseEncryptionProtectorsImpl implements DatabaseEncryptionProtectors {
    private readonly client;
    /**
     * Initialize a new instance of the class DatabaseEncryptionProtectors class.
     * @param client Reference to the service client
     */
    constructor(client: SqlManagementClient);
    /**
     * Revalidates an existing encryption protector for a particular database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param encryptionProtectorName The name of the encryption protector to be updated.
     * @param options The options parameters.
     */
    beginRevalidate(resourceGroupName: string, serverName: string, databaseName: string, encryptionProtectorName: EncryptionProtectorName, options?: DatabaseEncryptionProtectorsRevalidateOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Revalidates an existing encryption protector for a particular database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param encryptionProtectorName The name of the encryption protector to be updated.
     * @param options The options parameters.
     */
    beginRevalidateAndWait(resourceGroupName: string, serverName: string, databaseName: string, encryptionProtectorName: EncryptionProtectorName, options?: DatabaseEncryptionProtectorsRevalidateOptionalParams): Promise<void>;
    /**
     * Reverts an existing encryption protector for a particular database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param encryptionProtectorName The name of the encryption protector to be updated.
     * @param options The options parameters.
     */
    beginRevert(resourceGroupName: string, serverName: string, databaseName: string, encryptionProtectorName: EncryptionProtectorName, options?: DatabaseEncryptionProtectorsRevertOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Reverts an existing encryption protector for a particular database.
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
     *                          this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param encryptionProtectorName The name of the encryption protector to be updated.
     * @param options The options parameters.
     */
    beginRevertAndWait(resourceGroupName: string, serverName: string, databaseName: string, encryptionProtectorName: EncryptionProtectorName, options?: DatabaseEncryptionProtectorsRevertOptionalParams): Promise<void>;
}
//# sourceMappingURL=databaseEncryptionProtectors.d.ts.map